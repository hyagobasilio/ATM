/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/* ###################
 * SISTEMA ATM
 * FAZ UMA SIMULAÇÃO SIMPLES DE UM CAIXA ELETRÔNICO
 * Criado em 31/03/2012, 11:11:06
 * ###################
 */
package br.com.SistemaATM.Visual;

import br.com.SistemaATM.Hardware.Tela;
import br.com.SistemaATM.Software.ATM;
import java.util.ArrayList;

/**
 * ATM_Visual.java
 * Classe responsável por armazenar e setar os componentes VISUAIS
 * @author Lucas Santos
 */

public class ATM_Visual extends javax.swing.JFrame {
    //<editor-fold defaultstate="collapsed" desc="Variaveis de Instancia - Campos">
    private ATM atm;
    private ArrayList<String> deposito  = new ArrayList<String>();
    private ArrayList<String> loginStr  = new ArrayList<String>(5);
    private ArrayList<String> senhaStr  = new ArrayList<String>(5);
    private int opcaoEscolhida          = 0;     // armazena a opção escolhida pelo usuário
    private int quantiaEscolhida        = 0;     // armazena a quantia/opção de saque ou depósito escolhida pelo usuário
    private String depositoStr          = "";    // armazena o texto obtido no ArrayList depósito que contem o valor de depósito
    private double depositoValor        = 0;     // armazena o valor double para depositar na conta de um usuário
    private String login                = "";    // armazena o texto obtido no ArrayList loginStr
    private String senha                = "";    // armazena o texto obtido no ArrayList senhaStr
    private String botaoApertado        = "";    // armazena a string de qualquer botão apertado
    private boolean loginSet            = false; // true se o login já foi configurado
    private boolean senhaSet            = false; // true se a senha já foi configurada
    private boolean onMenuPrincipal     = false; // true se o usuário está no menu principal
    private boolean onMenuDeSaque       = false; // true se o usuário está no menu de saque
    private boolean onMenuDeDeposito    = false; // true se o usuário está no menu de depósito
    private boolean onOpcaoDeTransacao  = false; // armazena true se o usuario já apertou uma opção de transação no menu principal
    private boolean onOpcaoDeSaque      = false; // armazena true se o usuario já apertou uma quantia/opção de saque no menu de saque
    private boolean onOpcaoDeDeposito   = false; // armazena true se o usuario já apertou uma quantia de depósito
    //</editor-fold>

    /** Creates new form ATM_Visual */
    public ATM_Visual() {
        initComponents();
        this.atm = new ATM(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPnlPrincipal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTxtAreaVisor = new javax.swing.JTextArea();
        JTxtAreaVisor.setText(Tela.msgLogin);
        JPnlBotoes = new javax.swing.JPanel();
        JBtn0 = new javax.swing.JButton();
        JBtn1 = new javax.swing.JButton();
        JBtn2 = new javax.swing.JButton();
        JBtn3 = new javax.swing.JButton();
        JBtn4 = new javax.swing.JButton();
        JBtn5 = new javax.swing.JButton();
        JBtn6 = new javax.swing.JButton();
        JBtn7 = new javax.swing.JButton();
        JBtn8 = new javax.swing.JButton();
        JBtn9 = new javax.swing.JButton();
        JBtnEnter = new javax.swing.JButton();
        JBtnApagar = new javax.swing.JButton();
        JPnlImagens = new javax.swing.JPanel();
        JLblEntrada = new javax.swing.JLabel();
        JLblSaida = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        JPnlPrincipal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.white, null, null));

        JTxtAreaVisor.setColumns(20);
        JTxtAreaVisor.setEditable(false);
        JTxtAreaVisor.setRows(5);
        jScrollPane1.setViewportView(JTxtAreaVisor);

        JPnlBotoes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), null, null));

        JBtn0.setText("0");
        JBtn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn0ActionPerformed(evt);
            }
        });

        JBtn1.setText("1");
        JBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn1ActionPerformed(evt);
            }
        });

        JBtn2.setText("2");
        JBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn2ActionPerformed(evt);
            }
        });

        JBtn3.setText("3");
        JBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn3ActionPerformed(evt);
            }
        });

        JBtn4.setText("4");
        JBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn4ActionPerformed(evt);
            }
        });

        JBtn5.setText("5");
        JBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn5ActionPerformed(evt);
            }
        });

        JBtn6.setText("6");
        JBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn6ActionPerformed(evt);
            }
        });

        JBtn7.setText("7");
        JBtn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn7ActionPerformed(evt);
            }
        });

        JBtn8.setText("8");
        JBtn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn8ActionPerformed(evt);
            }
        });

        JBtn9.setText("9");
        JBtn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn9ActionPerformed(evt);
            }
        });

        JBtnEnter.setText("ENTER");
        JBtnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnEnterActionPerformed(evt);
            }
        });

        JBtnApagar.setText("APAGAR");
        JBtnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnApagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPnlBotoesLayout = new javax.swing.GroupLayout(JPnlBotoes);
        JPnlBotoes.setLayout(JPnlBotoesLayout);
        JPnlBotoesLayout.setHorizontalGroup(
            JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JBtnApagar, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addGroup(JPnlBotoesLayout.createSequentialGroup()
                        .addComponent(JBtn0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtnEnter, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                    .addGroup(JPnlBotoesLayout.createSequentialGroup()
                        .addComponent(JBtn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn3))
                    .addGroup(JPnlBotoesLayout.createSequentialGroup()
                        .addComponent(JBtn4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn6))
                    .addGroup(JPnlBotoesLayout.createSequentialGroup()
                        .addComponent(JBtn7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtn9)))
                .addContainerGap())
        );
        JPnlBotoesLayout.setVerticalGroup(
            JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPnlBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JBtnApagar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JBtn7)
                        .addComponent(JBtn8))
                    .addComponent(JBtn9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtn4)
                    .addComponent(JBtn5)
                    .addComponent(JBtn6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtn1)
                    .addComponent(JBtn3)
                    .addComponent(JBtn2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtn0)
                    .addComponent(JBtnEnter))
                .addContainerGap())
        );

        JPnlImagens.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), null, null));

        JLblEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/SistemaATM/Visual/Imagens/Entrada.jpg"))); // NOI18N
        JLblEntrada.setText("jLabel1");

        JLblSaida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/SistemaATM/Visual/Imagens/Dispensador.jpg"))); // NOI18N
        JLblSaida.setText("jLabel2");

        javax.swing.GroupLayout JPnlImagensLayout = new javax.swing.GroupLayout(JPnlImagens);
        JPnlImagens.setLayout(JPnlImagensLayout);
        JPnlImagensLayout.setHorizontalGroup(
            JPnlImagensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlImagensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPnlImagensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JLblSaida, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(JLblEntrada, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPnlImagensLayout.setVerticalGroup(
            JPnlImagensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlImagensLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLblEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(JLblSaida)
                .addContainerGap())
        );

        javax.swing.GroupLayout JPnlPrincipalLayout = new javax.swing.GroupLayout(JPnlPrincipal);
        JPnlPrincipal.setLayout(JPnlPrincipalLayout);
        JPnlPrincipalLayout.setHorizontalGroup(
            JPnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, JPnlPrincipalLayout.createSequentialGroup()
                        .addComponent(JPnlBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JPnlImagens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPnlPrincipalLayout.setVerticalGroup(
            JPnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPnlBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JPnlImagens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(JPnlPrincipal, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    //<editor-fold defaultstate="collapsed" desc="Metodo MAIN">
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATM_Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATM_Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATM_Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATM_Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ATM_Visual().setVisible(true);
            }
        });
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Eventos do Teclado Numerico">
    private void JBtn0ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn0ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn0ActionPerformed

    private void JBtn1ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn1ActionPerformed
        // Se o usuário não foi autenticado
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu principal e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuPrincipal && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuPrincipal();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn1ActionPerformed

    private void JBtn2ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn2ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu principal e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuPrincipal && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuPrincipal();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn2ActionPerformed

    private void JBtn3ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn3ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu principal e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuPrincipal && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuPrincipal();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn3ActionPerformed

    private void JBtn4ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn4ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu principal e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuPrincipal && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuPrincipal();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn4ActionPerformed

    private void JBtn5ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn5ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn5ActionPerformed

    private void JBtn6ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn6ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque e um botão já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn6ActionPerformed

    private void JBtn7ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn7ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn7ActionPerformed

    private void JBtn8ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn8ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn8ActionPerformed

    private void JBtn9ActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtn9ActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito e um botao já foi apertado
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito && !botaoApertado.equals("") ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtn9ActionPerformed

    private void JBtnEnterActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtnEnterActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu principal
        else if( atm.getUsuarioAutenticado() && onMenuPrincipal ) {
            setBotaoApertado(evt);
            exibiMenuPrincipal();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de saque
        else if( atm.getUsuarioAutenticado() && onMenuDeSaque ) {
            setBotaoApertado(evt);
            exibiMenuDeSaque();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtnEnterActionPerformed

    private void JBtnApagarActionPerformed( java.awt.event.ActionEvent evt ) {//GEN-FIRST:event_JBtnApagarActionPerformed
        if( !atm.getUsuarioAutenticado() ) {
            setBotaoApertado(evt);
            entrarNoSistema();
        }
        // Senão se o usuário foi autenticado e o usuário está no menu de depósito
        else if( atm.getUsuarioAutenticado() && onMenuDeDeposito ) {
            setBotaoApertado(evt);
            exibiQuantiaDeposito();
        }
    }//GEN-LAST:event_JBtnApagarActionPerformed
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodo entrarNoSistema - Responsável pela tela de login">
    private void entrarNoSistema() {
        // Se o usuario já configurou o login e digitou a senha e apertou enter, configura a senha e verifica se o usuario existe
        if( botaoApertado.equals("ENTER") && loginSet == true && !senha.equals("") ) { 
            senhaSet = true;
            JTxtAreaVisor.setText(Tela.msgLogin + login + Tela.msgSenha + senha );
            int numeroDaConta = Integer.parseInt(login); // armazena o número da conta como um inteiro
            int senhaDaConta = Integer.parseInt(senha);  // armazena a senha da conta como um inteiro
            atm.verificaUsuario(numeroDaConta, senhaDaConta);
            if( atm.getUsuarioAutenticado() == false ) {
                JTxtAreaVisor.setText( Tela.msgSenhaInvalida + Tela.msgLogin );
                loginSet = false;
                senhaSet = false;
                loginStr.clear();
                senhaStr.clear();
                login    = "";
                senha    = "";
            }
            else {
                onMenuPrincipal = true;
                exibiMenuPrincipal();
            }
        }
        // Usuario digitou o numero da conta e apertou ENTER - Configura o login
        else if( botaoApertado.equals("ENTER") && loginSet == false && !login.equals("") ) {
            loginSet = true;
            JTxtAreaVisor.setText(Tela.msgLogin + login + Tela.msgSenha);
        }
        // digita os números para login
        else if( ( loginSet == false ) && ( loginStr.size() < 5 ) && ( !botaoApertado.equals("APAGAR") ) && ( !botaoApertado.equals("ENTER") ) ) {
            loginStr.add(botaoApertado);
            login += loginStr.get(loginStr.size() - 1);
            JTxtAreaVisor.setText(Tela.msgLogin + login);
        }
        // digita os números para senha
        else if( ( loginSet == true ) && ( senhaStr.size() < 5 ) && ( !botaoApertado.equals("APAGAR") ) && ( !botaoApertado.equals("ENTER") ) ) {
            senhaStr.add(botaoApertado);
            senha += senhaStr.get(senhaStr.size() - 1);
            String senhaAsteriscos = "";
            for( int i = 0; i < senha.length(); i++ ) {
                senhaAsteriscos += "*";
            }
            JTxtAreaVisor.setText(Tela.msgLogin + login + Tela.msgSenha + senhaAsteriscos);
        }
        // apaga algum número digitado no login
        else if( ( botaoApertado.equals("APAGAR") ) && ( loginSet == false ) && ( loginStr.size() > 0 ) ) {
            loginStr.remove(loginStr.size() -1 );
            login = login.substring(0, loginStr.size() );
            JTxtAreaVisor.setText(Tela.msgLogin + login);
        }
        // apaga algum número digitado na senha
        else if( ( botaoApertado.equals("APAGAR") ) && ( loginSet == true ) && ( senhaSet == false ) && ( senhaStr.size() > 0 ) ) {
            senhaStr.remove(senhaStr.size() -1 );
            senha = senha.substring(0, senhaStr.size() );
            String senhaAsteriscos = "";
            for( int i = 0; i < senha.length(); i++ ) {
                senhaAsteriscos += "*";
            }
            JTxtAreaVisor.setText(Tela.msgLogin + login + Tela.msgSenha + senhaAsteriscos);
        }
    }
    //</editor-fold>

    public void exibiMenuPrincipal() {
        JTxtAreaVisor.setText(Tela.msgMenuPrincipal);
        
        // Se o botão apertado for diferente de ENTER e diferente de nada
        if( !botaoApertado.equals("ENTER") && !botaoApertado.equals("") ) {
            JTxtAreaVisor.setText(Tela.msgMenuPrincipal + botaoApertado);
            opcaoEscolhida     = Integer.parseInt(botaoApertado);
            onOpcaoDeTransacao = true;
        }
        // Senão se o botão apertado for Igual a enter e tiver um numero escolhido, confirma e executa a opção escolhida
        else if( botaoApertado.equals("ENTER") && onOpcaoDeTransacao ) {
            onMenuPrincipal    = false; // Sai do Menu Principal
            onOpcaoDeTransacao = false; // Já escolheu opção então reseta para a próxima vez
            atm.efetuaTransacoes(opcaoEscolhida);
        }
    }
    
    public void exibiMenuDeSaque() {
        JTxtAreaVisor.setText(Tela.msgMenuDeSaque);
        
        // Se o botão apertado for diferente de ENTER e diferente de nada
        if( !botaoApertado.equals("ENTER") && !botaoApertado.equals("") ) {
            JTxtAreaVisor.setText(Tela.msgMenuDeSaque + botaoApertado);
            quantiaEscolhida = Integer.parseInt(botaoApertado);
            onOpcaoDeSaque = true;
        }
        // Senão se o botão apertado for Igual a enter e tiver um numero escolhido, confirma e executa a opção escolhida
        else if( botaoApertado.equals("ENTER") && onOpcaoDeSaque ) {
            onMenuDeSaque   = false; // Sai do Menu De Saque
            onOpcaoDeSaque  = false; // Já escolheu opção então reseta para a próxima vez
            atm.setOnMS(true);
            atm.efetuaTransacoes(quantiaEscolhida);
        }
    }
    
    public void exibiQuantiaDeposito() {
        JTxtAreaVisor.setText(Tela.msgPedeQuantia);
        
        // digita os números para deposito se botaoApertado for diferente de APAGAR e ENTER
        if( !botaoApertado.equals("APAGAR") && !botaoApertado.equals("ENTER") ) {
            deposito.add(botaoApertado);
            depositoStr += deposito.get(deposito.size() - 1);
            JTxtAreaVisor.setText(Tela.msgPedeQuantia + depositoStr);
            quantiaEscolhida = Integer.parseInt(depositoStr);
            onOpcaoDeDeposito = true;
        }
        // apaga algum número digitado para depósito se o usuário apertou apagar
        else if( botaoApertado.equals("APAGAR") && deposito.size() > 0 ) {
            deposito.remove(deposito.size() -1 );
            depositoStr = depositoStr.substring(0, deposito.size() );
            JTxtAreaVisor.setText(Tela.msgPedeQuantia + depositoStr);
            onOpcaoDeDeposito = false;
        }
        // Senão se o botão apertado for Igual a ENTER e tiver um numero escolhido, confirma e executa a opção escolhida
        else if( botaoApertado.equals("ENTER") && onOpcaoDeDeposito ) {
            onMenuDeDeposito   = false; // Sai do Menu De Deposito
            onOpcaoDeDeposito  = false; // Já escolheu quantia então reseta para a próxima vez
            depositoStr = "";
            deposito.clear();
            atm.setOnMD(true); // diz que veio do menu de depósito para o ATM
            atm.efetuaTransacoes(quantiaEscolhida);
        }
    }
    
    //<editor-fold defaultstate="collapsed" desc="Configura qual foi o botão apertado">
    private void setBotaoApertado( java.awt.event.ActionEvent evento ) {
        // Faz a verificação de qual botão foi apertado - Numeros, Enter ou Apagar
        if( ( !evento.getActionCommand().equals("ENTER") ) && (!evento.getActionCommand().equals("APAGAR") ) ) {
            botaoApertado = evento.getActionCommand();
        }
        else if( evento.getActionCommand().equals("ENTER") ) {
            botaoApertado = evento.getActionCommand();
        }
        else if( evento.getActionCommand().equals("APAGAR") ) {
            botaoApertado = evento.getActionCommand();
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Metodos Setters para resetar variaveis de instancia">
    public void setBotaoApertado() {
        botaoApertado = "";
    }
    
    public void setLogin() {
        login = "";
    }
    
    public void setLoginSet( boolean b ) {
        loginSet = b;
    }
    
    public void setLoginStr() {
        loginStr.clear();
    }
    
    public void setSenha() {
        senha = "";
    }
    
    public void setSenhaSet( boolean b ) {
        senhaSet = b;
    }
    
    public void setSenhaStr() {
        senhaStr.clear();
    }
    
    public void setOnMenuPrincipal( boolean b ) {
        onMenuPrincipal = b;
    }
    
    public void setOnMenuDeSaque( boolean b ) {
        onMenuDeSaque = b;
    }

    public void setOnMenuDeDeposito( boolean b ) {
        onMenuDeDeposito = b;
    }
    
    public int getQuantiaEscolhida() {
        return quantiaEscolhida;
    }
    //</editor-fold>
    
    public void setJTxtAreaVisor( String s ) {
        JTxtAreaVisor.setText(s);
    }

    //<editor-fold defaultstate="collapsed" desc="Campos dos Componentes">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtn0;
    private javax.swing.JButton JBtn1;
    private javax.swing.JButton JBtn2;
    private javax.swing.JButton JBtn3;
    private javax.swing.JButton JBtn4;
    private javax.swing.JButton JBtn5;
    private javax.swing.JButton JBtn6;
    private javax.swing.JButton JBtn7;
    private javax.swing.JButton JBtn8;
    private javax.swing.JButton JBtn9;
    private javax.swing.JButton JBtnApagar;
    private javax.swing.JButton JBtnEnter;
    private javax.swing.JLabel JLblEntrada;
    private javax.swing.JLabel JLblSaida;
    private javax.swing.JPanel JPnlBotoes;
    private javax.swing.JPanel JPnlImagens;
    private javax.swing.JPanel JPnlPrincipal;
    private javax.swing.JTextArea JTxtAreaVisor;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}